//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "category"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub english_name: String,
    pub slovene_name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    EnglishName,
    SloveneName,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    WordCategory,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::EnglishName => ColumnType::String(None).def(),
            Self::SloveneName => ColumnType::String(None).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::WordCategory => Entity::has_many(super::word_category::Entity).into(),
        }
    }
}

impl Related<super::word_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WordCategory.def()
    }
}

impl Related<super::word::Entity> for Entity {
    fn to() -> RelationDef {
        super::word_category::Relation::Word.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::word_category::Relation::Category.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
