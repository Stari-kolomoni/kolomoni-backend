//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "word_translation"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub english_word_id: Uuid,
    pub slovene_word_id: Uuid,
    pub translated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    EnglishWordId,
    SloveneWordId,
    TranslatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    EnglishWordId,
    SloveneWordId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (Uuid, Uuid);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    WordEnglish,
    WordSlovene,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::EnglishWordId => ColumnType::Uuid.def(),
            Self::SloveneWordId => ColumnType::Uuid.def(),
            Self::TranslatedAt => ColumnType::TimestampWithTimeZone.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::WordEnglish => Entity::belongs_to(super::word_english::Entity)
                .from(Column::EnglishWordId)
                .to(super::word_english::Column::WordId)
                .into(),
            Self::WordSlovene => Entity::belongs_to(super::word_slovene::Entity)
                .from(Column::SloveneWordId)
                .to(super::word_slovene::Column::WordId)
                .into(),
        }
    }
}

impl Related<super::word_english::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WordEnglish.def()
    }
}

impl Related<super::word_slovene::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WordSlovene.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
