//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "word_english"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub word_id: Uuid,
    pub lemma: String,
    pub disambiguation: Option<String>,
    pub description: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub last_modified_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    WordId,
    Lemma,
    Disambiguation,
    Description,
    CreatedAt,
    LastModifiedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    WordId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Word,
    WordTranslation,
    WordTranslationSuggestion,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::WordId => ColumnType::Uuid.def(),
            Self::Lemma => ColumnType::String(None).def(),
            Self::Disambiguation => ColumnType::String(None).def().null(),
            Self::Description => ColumnType::String(None).def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::LastModifiedAt => ColumnType::TimestampWithTimeZone.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Word => Entity::belongs_to(super::word::Entity)
                .from(Column::WordId)
                .to(super::word::Column::Id)
                .into(),
            Self::WordTranslation => Entity::has_many(super::word_translation::Entity).into(),
            Self::WordTranslationSuggestion => {
                Entity::has_many(super::word_translation_suggestion::Entity).into()
            }
        }
    }
}

impl Related<super::word::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Word.def()
    }
}

impl Related<super::word_translation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WordTranslation.def()
    }
}

impl Related<super::word_translation_suggestion::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WordTranslationSuggestion.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
