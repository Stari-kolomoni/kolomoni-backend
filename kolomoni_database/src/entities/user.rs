//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    #[sea_orm(unique)]
    pub display_name: String,
    pub hashed_password: String,
    pub joined_at: DateTimeWithTimeZone,
    pub last_modified_at: DateTimeWithTimeZone,
    pub last_active_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_permission::Entity")]
    UserPermission,
}

impl Related<super::user_permission::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPermission.def()
    }
}

impl Related<super::permission::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_permission::Relation::Permission.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_permission::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
